# -*- coding: utf-8 -*-
"""segformer_simple.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1glhxTSDq-CPpVIfPvA6GbpsrTgGU9ZWE
"""

from transformers import AutoImageProcessor, SegformerForSemanticSegmentation
from PIL import Image
import requests

image_processor = AutoImageProcessor.from_pretrained("nvidia/segformer-b0-finetuned-cityscapes-512-1024")
model = SegformerForSemanticSegmentation.from_pretrained("nvidia/segformer-b0-finetuned-cityscapes-512-1024")

url = "http://images.cocodataset.org/val2017/000000039769.jpg"
image = Image.open(requests.get(url, stream=True).raw)

image = Image.open("/orion/u/xs15/531951712795636_.pic.jpg")

import numpy as np
np.array(image).shape

image

inputs = image_processor(images=image, return_tensors="pt")
outputs = model(**inputs)

logits = outputs.logits  # shape (batch_size, num_labels, height/4, width/4)
list(logits.shape)

import torch
from torch import nn
import matplotlib.pyplot as plt

image.size

upsampled_logits = nn.functional.interpolate(
    logits,
    size=image.size[::-1], # (height, width)
    mode='bilinear',
    align_corners=False
)

# Second, apply argmax on the class dimension
pred_seg = upsampled_logits.argmax(dim=1)[0]

plt.imshow(inputs.pixel_values[0].permute(1, 2, 0))

image

plt.figure(figsize=(20, 10))
plt.imshow(pred_seg.cpu().numpy(), cmap='tab20')

('road', 'sidewalk', 'building', 'wall', 'fence', 'pole',
'traffic light', 'traffic sign', 'vegetation', 'terrain', 'sky',
'person', 'rider', 'car', 'truck', 'bus', 'train', 'motorcycle',
'bicycle')

pred_seg[750, 800]

upsampled_logits.shape

